{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25200\viewh17340\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Using Postgres\
`rails new <project> <\'97skip-git -T> -d postgresql`\
\
`rails db:create`\
\
`rails generate model Song`\
Will create everything for the song table.\
\
Go to Atom, and in the db/migrate folder add the new fields\
```class CreateSongs < ActiveRecord::M
\fs34 i
\fs24 gration[5.1]\
  def change\
    create_table :songs do |t|\
      t.text :title\
      t.integer :artist_id\
      t.integer :album_id\
      t.timestamps\
    end\
  end\
end\
```\
\
\
```rails db:migrate\
annotate\
```\
\
\
`rails db`\
will in this case get to the postgresql prompt - this is the database in this project.\
`\\d `\
to show whole schema\
The annotations are added to app/models/song.rb (or whatever table name)\
\
`rails generate model Artist`\
add fields etc\
\
`rails db:migrate && annotate`\
does both in one line\
\
## Linking Tables\
`rails generate migration create_genres_songs`\
makes the linking table\
\
```class CreateGenresSongs < ActiveRecord::Migration[5.1]\
  def change\
    create_table :genres_songs, :id => false do |t|\
      t.integer :genre_id\
      t.integer :song_id\
    end\
  end\
end\
```\
adds the primary keys from the other tables. Note that id => false means that this table doesn\'92t need it\'92s own primary key.\
\
`rails db:migrate`\
\
repeat for all and any many-to-many linking tables.\
\
```rails db\
\\d # for the whole schema\
\\d songs # for the songs table schema\
```\
\
\
\
add the necesary links between tables\
```class Album < ApplicationRecord\
  has_many :songs\
end\
```\
\
\
```class Song < ApplicationRecord\
  belongs_to :artist\
  belongs_to :album\
  has_and_belongs_to_many :genres\
  has_and_belongs_to_many :mixtapes\
end\
```\
\
\
```class Genre < ApplicationRecord\
  has_and_belongs_to_many :songs\
end\
```\
\
\
Do the seeding. Note that if you use variables, then you can make the associations work every time without editing.\
```Song.destroy_all\
song1 = Song.create :title => "Be True to Your School"\
song2 = Song.create :title => "Warpigs"\
song3 = Song.create :title => "The Eliminator"\
\
Album.destroy_all\
album1 = Album.create :title => "More crap by the Beach Boys"\
album2 = Album.create :title => "Paranoid"\
album3 = Album.create :title => "Maserati VI"\
\
album1.songs << song1\
album2.songs << song2\
album3.songs << song3\
```\
\
\
`rails db:seed`\
\
Check all has gone OK;\
\
`rails console`\
`Booker.first`\
`Job.last`\
etc\
\
---\
\
add `"pry"` to Gemfile in `group :development do`\
\
if you awnt to jump across associated tables ie from Artist to Album while skipping the Song then add\
`has_many :albums, :through => :songs`\
\
\
## Routes\
\
`rails generate controller Pages home`\
\
go to config/routes.rb to remove the auto generated and replace with \
`root :to => "pages#home"`\
\
\
`rails routes`\
will have only one entry at this stage. Now add more controllers as\'85\
\
`rails generate controller Jobs index new edit show`\
\
again, go rid of the auto generted routes and replace with\
`resources :jobs, :only => [:index, :new, :create, :edit, :update]`\
\
This makes stuff more secure\
 Check with rails routes again.\
also run\
\
`annotate -r`\
\
OK, so this finished the first pass simple set of tables. Now go and work on ruby CRUD to be able to add / edit etc\
---\
`rails server`\
\
Start with the jobs controller - app/controllers/jobs_controller.rb and something like\
```  def index\
    @jobs = Job.all \
  end\
```\
Then to the html / erb index page in app/views/jobs/index.html.erb and show all records using a loop\
\
\
---\
\
\
\
\
\
\
`rails generate controller Users new`\
\
`rails generate migration add_password_digest_to_users`\
\
Add this to the migration file\
```class AddPasswordDigestToUser < ActiveRecord::Migration[5.1]\
  def change\
    add_column :users, :password_digest, :string\
  end\
end\
```\
\
\
`rails db:migrate`\
\
add to user.rb\
```class User < ApplicationRecord\
  has_secure_password\
  has_many :mixtapes\
end\
```\
\
\
\
add the gemfile for bcrypt\
\
`bundle`}